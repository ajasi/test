openapi: 3.0.0
info:
  title: Chocolate Factory API
  version: 1.0.0
  description: API for managing chocolate factories, chocolates, users, carts, purchases, and comments.
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /:
    get:
      summary: Welcome message
      responses:
        '200':
          description: Welcome message
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
  /login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User logged in
        '401':
          description: Invalid credentials
  /logout:
    post:
      summary: Logout a user
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the user making the request
      responses:
        '200':
          description: User logged out
        '401':
          description: User not logged in
  /users/me:
    get:
      summary: Get logged-in user data
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in user
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User not logged in
    put:
      summary: Update logged-in user data
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input
        '401':
          description: User not logged in
  /users:
    get:
      summary: Get all users (Admin only)
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Access denied
  /users/{username}:
    get:
      summary: Get a user by username (Admin only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to retrieve
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '403':
          description: Access denied
    put:
      summary: Update a user by username (Admin only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: User not found
    delete:
      summary: Delete a user by username (Admin only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to delete
      responses:
        '200':
          description: User deleted
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: User not found
  /factories:
    post:
      summary: Create a new factory (Admin only)
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Factory'
      responses:
        '201':
          description: Factory created
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
    get:
      summary: Get all factories
      responses:
        '200':
          description: A list of factories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Factory'
  /factories/{id}:
    get:
      summary: Get a factory by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory to retrieve
      responses:
        '200':
          description: Factory data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Factory'
        '404':
          description: Factory not found
    put:
      summary: Update a factory by ID (Admin or Manager)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory to update
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin or manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Factory'
      responses:
        '200':
          description: Factory updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory not found
    delete:
      summary: Delete a factory by ID (Admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory to delete
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin
      responses:
        '200':
          description: Factory deleted
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory not found
  /factories/name/{name}:
    get:
      summary: Get a factory by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: The name of the factory to retrieve
      responses:
        '200':
          description: Factory data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Factory'
        '404':
          description: Factory not found
  /factories/{id}/chocolates:
    post:
      summary: Create a new chocolate in a factory (Manager only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chocolate'
      responses:
        '201':
          description: Chocolate created
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory not found
    get:
      summary: Get all chocolates in a factory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
      responses:
        '200':
          description: A list of chocolates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chocolate'
        '404':
          description: Factory not found
  /factories/{id}/chocolates/{chocolateId}:
    get:
      summary: Get a chocolate by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: chocolateId
          required: true
          schema:
            type: integer
          description: The ID of the chocolate to retrieve
      responses:
        '200':
          description: Chocolate data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chocolate'
        '404':
          description: Chocolate not found
    put:
      summary: Update a chocolate by ID (Manager or Worker)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: chocolateId
          required: true
          schema:
            type: integer
          description: The ID of the chocolate to update
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in manager or worker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chocolate'
      responses:
        '200':
          description: Chocolate updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Chocolate not found
    delete:
      summary: Delete a chocolate by ID (Admin or Manager)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: chocolateId
          required: true
          schema:
            type: integer
          description: The ID of the chocolate to delete
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin or manager
      responses:
        '200':
          description: Chocolate deleted
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Chocolate not found
  /factories/{id}/purchases:
    post:
      summary: Create a new purchase in a factory (Customer only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      responses:
        '201':
          description: Purchase created
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '404':
          description: Factory not found
    get:
      summary: Get all purchases in a factory (Admin or Manager)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin or manager
      responses:
        '200':
          description: A list of purchases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
        '404':
          description: Factory not found
  /factories/{id}/purchases/{purchaseId}:
    get:
      summary: Get a purchase by ID (Admin or Manager)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: purchaseId
          required: true
          schema:
            type: integer
          description: The ID of the purchase to retrieve
      responses:
        '200':
          description: Purchase data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: Purchase not found
    put:
      summary: Update a purchase by ID (Admin, Manager, or Customer)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: purchaseId
          required: true
          schema:
            type: integer
          description: The ID of the purchase to update
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
      responses:
        '200':
          description: Purchase updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Purchase not found
    delete:
      summary: Delete a purchase by ID (Customer only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: purchaseId
          required: true
          schema:
            type: integer
          description: The ID of the purchase to delete
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      responses:
        '200':
          description: Purchase deleted
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Purchase not found
  /factories/{id}/comments:
    post:
      summary: Create a new comment in a factory (Customer only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory not found
    get:
      summary: Get all comments in a factory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in user
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory not found
  /factories/{id}/comments/{commentId}:
    get:
      summary: Get a comment by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
          description: The ID of the comment to retrieve
      responses:
        '200':
          description: Comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
    put:
      summary: Update a comment by ID (Manager only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
          description: The ID of the comment to update
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in manager
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Comment not found
    delete:
      summary: Delete a comment by ID (Admin or Manager)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: commentId
          required: true
          schema:
            type: integer
          description: The ID of the comment to delete
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in admin or manager
      responses:
        '200':
          description: Comment deleted
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Comment not found
  /cart:
    post:
      summary: Add item to cart (Customer only)
      parameters:
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Item added to cart
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Factory or Chocolate not found
  /cart/{username}:
    get:
      summary: Get cart by username (Customer only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the cart owner
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      responses:
        '200':
          description: Cart data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItemDetail'
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Cart not found
    put:
      summary: Update cart item quantity (Customer only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the cart owner
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Cart updated
        '400':
          description: Invalid input
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Cart or Item not found
  /cart/{username}/{factoryId}/{chocolateId}:
    delete:
      summary: Remove item from cart (Customer only)
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the cart owner
        - in: path
          name: factoryId
          required: true
          schema:
            type: integer
          description: The ID of the factory
        - in: path
          name: chocolateId
          required: true
          schema:
            type: integer
          description: The ID of the chocolate to remove from cart
        - in: header
          name: username
          required: true
          schema:
            type: string
          description: The username of the logged-in customer
      responses:
        '200':
          description: Item removed from cart
        '401':
          description: Invalid credentials
        '403':
          description: Access denied
        '404':
          description: Cart or Item not found

components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
        - gender
        - birthDate
        - role
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
        birthDate:
          type: string
        role:
          type: string
        factoryId:
          type: integer
          nullable: true
        cartId:
          type: integer
          nullable: true
        purchaseIds:
          type: array
          items:
            type: integer
        points:
          type: integer
        customerTypeId:
          type: integer
          nullable: true
        deleted:
          type: boolean
        loggedIn:
          type: boolean
    Login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Factory:
      type: object
      required:
        - name
        - location
        - workingHours
        - logo
        - managerId
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        workingHours:
          type: object
          properties:
            from:
              type: string
            to:
              type: string
        status:
          type: string
        logo:
          type: string
        managerId:
          type: integer
        rating:
          type: number
          nullable: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        chocolates:
          type: array
          items:
            $ref: '#/components/schemas/Chocolate'
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
        deleted:
          type: boolean
    Location:
      type: object
      required:
        - address
      properties:
        address:
          type: string
    Chocolate:
      type: object
      required:
        - name
        - price
        - type
        - kind
        - weight
        - description
        - image
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        type:
          type: string
        kind:
          type: string
        weight:
          type: string
        description:
          type: string
        image:
          type: string
        status:
          type: string
        quantity:
          type: integer
        deleted:
          type: boolean
    Purchase:
      type: object
      required:
        - chocolates
        - date
        - totalPrice
        - username
        - status
      properties:
        id:
          type: integer
        chocolates:
          type: array
          items:
            type: object
            properties:
              chocolateId:
                type: integer
              quantity:
                type: integer
        date:
          type: string
        totalPrice:
          type: number
        username:
          type: string
        status:
          type: string
        comment:
          type: string
          nullable: true
        deleted:
          type: boolean
    Comment:
      type: object
      required:
        - username
        - text
      properties:
        id:
          type: integer
        username:
          type: string
        text:
          type: string
        rating:
          type: integer
          nullable: true
        approved:
          type: string
        deleted:
          type: boolean
    CartItem:
      type: object
      required:
        - chocolateId
        - factoryId
        - quantity
      properties:
        chocolateId:
          type: integer
        factoryId:
          type: integer
        quantity:
          type: integer
    CartItemDetail:
      type: object
      properties:
        chocolateId:
          type: integer
        factoryId:
          type: integer
        quantity:
          type: integer
        factoryName:
          type: string
        chocolate:
          $ref: '#/components/schemas/Chocolate'
        totalPrice:
          type: number
